name: CI

on:
  pull_request:
  push:
    branches: [ main ]

jobs:
  lint-type-test:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install .
          if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi
      - name: Lint (ruff)
        run: |
          pip install ruff
          ruff --version
          ruff check app tests || true
      - name: Format check (black)
        run: |
          pip install black
          black --version
          black --check app tests || true
      - name: Type check (mypy)
        run: |
          pip install mypy
          mypy app || true
      - name: Security (bandit)
        run: |
          pip install bandit
          bandit -r app -x tests || true
      - name: Tests (pytest with coverage)
        env:
          OPENAI_API_KEY: ""
          SHAP_ENABLED: "false"
        run: |
          pip install pytest pytest-cov
          pytest -q --maxfail=1 --disable-warnings --cov=app --cov-report=xml:coverage.xml
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: backend/coverage.xml
          fail_ci_if_error: false



  docker-smoke:
    runs-on: ubuntu-latest
    needs: lint-type-test
    steps:
      - uses: actions/checkout@v4
      - name: Compose up and smoke
        run: |
          docker compose up --build -d
          i=0; until curl -s -S -m 2 -f http://localhost:8000/health >/dev/null; do \
            i=$((i+1)); \
            if [ $i -gt 60 ]; then echo "Timeout waiting for backend health"; docker compose logs backend; exit 1; fi; \
            sleep 1; \
          done
          bash scripts/smoke.sh
          docker compose down
        env:
          REPORT_JSON_FIRST: "true"
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
