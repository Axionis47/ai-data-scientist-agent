Found 29 known vulnerabilities in 11 packages
{"dependencies": [{"name": "accelerate", "version": "0.25.0", "vulns": []}, {"name": "ai-data-scientist-agent", "skip_reason": "Dependency not found on PyPI and could not be audited: ai-data-scientist-agent (0.1.0)"}, {"name": "aiohappyeyeballs", "version": "2.6.1", "vulns": []}, {"name": "aiohttp", "version": "3.12.15", "vulns": []}, {"name": "aiosignal", "version": "1.4.0", "vulns": []}, {"name": "alembic", "version": "1.16.4", "vulns": []}, {"name": "altair", "version": "5.5.0", "vulns": []}, {"name": "annotated-types", "version": "0.7.0", "vulns": []}, {"name": "anthropic", "version": "0.7.8", "vulns": []}, {"name": "antlr4-python3-runtime", "version": "4.9.3", "vulns": []}, {"name": "anyio", "version": "3.7.1", "vulns": []}, {"name": "appnope", "version": "0.1.4", "vulns": []}, {"name": "argon2-cffi", "version": "25.1.0", "vulns": []}, {"name": "argon2-cffi-bindings", "version": "21.2.0", "vulns": []}, {"name": "arrow", "version": "1.3.0", "vulns": []}, {"name": "astroid", "version": "3.3.11", "vulns": []}, {"name": "asttokens", "version": "3.0.0", "vulns": []}, {"name": "async-lru", "version": "2.0.5", "vulns": []}, {"name": "asyncio", "version": "3.4.3", "vulns": []}, {"name": "asyncio-throttle", "version": "1.0.2", "vulns": []}, {"name": "asyncpg", "version": "0.30.0", "vulns": []}, {"name": "attrs", "version": "25.3.0", "vulns": []}, {"name": "authlib", "version": "1.6.5", "vulns": []}, {"name": "babel", "version": "2.17.0", "vulns": []}, {"name": "backoff", "version": "2.2.1", "vulns": []}, {"name": "bandit", "version": "1.7.9", "vulns": []}, {"name": "bcrypt", "version": "4.3.0", "vulns": []}, {"name": "beautifulsoup4", "version": "4.13.4", "vulns": []}, {"name": "black", "version": "24.8.0", "vulns": []}, {"name": "bleach", "version": "6.2.0", "vulns": []}, {"name": "blinker", "version": "1.9.0", "vulns": []}, {"name": "bokeh", "version": "3.7.3", "vulns": []}, {"name": "boolean-py", "version": "5.0", "vulns": []}, {"name": "build", "version": "1.3.0", "vulns": []}, {"name": "cachecontrol", "version": "0.14.3", "vulns": []}, {"name": "cachetools", "version": "5.5.2", "vulns": []}, {"name": "certifi", "version": "2025.7.14", "vulns": []}, {"name": "cffi", "version": "1.17.1", "vulns": []}, {"name": "cfgv", "version": "3.4.0", "vulns": []}, {"name": "charset-normalizer", "version": "3.4.2", "vulns": []}, {"name": "chromadb", "version": "1.1.0", "vulns": []}, {"name": "click", "version": "8.2.1", "vulns": []}, {"name": "cloudpickle", "version": "3.1.1", "vulns": []}, {"name": "cmudict", "version": "1.1.1", "vulns": []}, {"name": "colorama", "version": "0.4.6", "vulns": []}, {"name": "colorcet", "version": "3.1.0", "vulns": []}, {"name": "coloredlogs", "version": "15.0.1", "vulns": []}, {"name": "colorlog", "version": "6.9.0", "vulns": []}, {"name": "comm", "version": "0.2.2", "vulns": []}, {"name": "contourpy", "version": "1.3.2", "vulns": []}, {"name": "coverage", "version": "7.10.1", "vulns": []}, {"name": "cryptography", "version": "45.0.5", "vulns": []}, {"name": "cycler", "version": "0.12.1", "vulns": []}, {"name": "cyclonedx-python-lib", "version": "9.1.0", "vulns": []}, {"name": "dacite", "version": "1.9.2", "vulns": []}, {"name": "dask", "version": "2025.7.0", "vulns": []}, {"name": "databricks-sdk", "version": "0.60.0", "vulns": []}, {"name": "datasets", "version": "2.16.0", "vulns": []}, {"name": "db-dtypes", "version": "1.4.3", "vulns": []}, {"name": "debugpy", "version": "1.8.15", "vulns": []}, {"name": "decorator", "version": "5.2.1", "vulns": []}, {"name": "defusedxml", "version": "0.7.1", "vulns": []}, {"name": "detect-secrets", "version": "1.5.0", "vulns": []}, {"name": "dill", "version": "0.3.7", "vulns": []}, {"name": "distlib", "version": "0.4.0", "vulns": []}, {"name": "distro", "version": "1.9.0", "vulns": []}, {"name": "dnspython", "version": "2.8.0", "vulns": []}, {"name": "docker", "version": "7.1.0", "vulns": []}, {"name": "dparse", "version": "0.6.4", "vulns": []}, {"name": "duckdb", "version": "1.3.2", "vulns": []}, {"name": "durationpy", "version": "0.10", "vulns": []}, {"name": "ecdsa", "version": "0.19.1", "vulns": [{"id": "GHSA-wj6h-64fc-37mp", "fix_versions": [], "aliases": ["CVE-2024-23342"], "description": "python-ecdsa has been found to be subject to a Minerva timing attack on the P-256 curve. Using the `ecdsa.SigningKey.sign_digest()` API function and timing signatures an attacker can leak the internal nonce which may allow for private key discovery. Both ECDSA signatures, key generation, and ECDH operations are affected. ECDSA signature verification is unaffected. The python-ecdsa project considers side channel attacks out of scope for the project and there is no planned fix."}]}, {"name": "email-validator", "version": "2.3.0", "vulns": []}, {"name": "et-xmlfile", "version": "2.0.0", "vulns": []}, {"name": "executing", "version": "2.2.0", "vulns": []}, {"name": "fastapi", "version": "0.111.0", "vulns": []}, {"name": "fastapi-cli", "version": "0.0.13", "vulns": []}, {"name": "fastjsonschema", "version": "2.21.1", "vulns": []}, {"name": "filelock", "version": "3.18.0", "vulns": []}, {"name": "flake8", "version": "7.3.0", "vulns": []}, {"name": "flask", "version": "3.1.1", "vulns": []}, {"name": "flask-cors", "version": "6.0.1", "vulns": []}, {"name": "flatbuffers", "version": "25.2.10", "vulns": []}, {"name": "fonttools", "version": "4.59.0", "vulns": []}, {"name": "fqdn", "version": "1.5.1", "vulns": []}, {"name": "frozenlist", "version": "1.7.0", "vulns": []}, {"name": "fsspec", "version": "2023.10.0", "vulns": []}, {"name": "gitdb", "version": "4.0.12", "vulns": []}, {"name": "gitpython", "version": "3.1.45", "vulns": []}, {"name": "google", "version": "3.0.0", "vulns": []}, {"name": "google-api-core", "version": "2.25.1", "vulns": []}, {"name": "google-api-python-client", "version": "2.177.0", "vulns": []}, {"name": "google-auth", "version": "2.40.3", "vulns": []}, {"name": "google-auth-httplib2", "version": "0.2.0", "vulns": []}, {"name": "google-auth-oauthlib", "version": "1.2.2", "vulns": []}, {"name": "google-cloud-bigquery", "version": "3.13.0", "vulns": []}, {"name": "google-cloud-core", "version": "2.4.3", "vulns": []}, {"name": "google-crc32c", "version": "1.7.1", "vulns": []}, {"name": "google-resumable-media", "version": "2.7.2", "vulns": []}, {"name": "googleapis-common-protos", "version": "1.70.0", "vulns": []}, {"name": "graphene", "version": "3.4.3", "vulns": []}, {"name": "graphql-core", "version": "3.2.6", "vulns": []}, {"name": "graphql-relay", "version": "3.2.0", "vulns": []}, {"name": "grpcio", "version": "1.74.0", "vulns": []}, {"name": "grpcio-status", "version": "1.62.3", "vulns": []}, {"name": "gunicorn", "version": "23.0.0", "vulns": []}, {"name": "h11", "version": "0.16.0", "vulns": []}, {"name": "h2", "version": "4.2.0", "vulns": [{"id": "GHSA-847f-9342-265h", "fix_versions": ["4.3.0"], "aliases": ["CVE-2025-57804"], "description": "### Summary  HTTP/2 request splitting vulnerability allows attackers to perform request smuggling attacks by injecting CRLF characters into headers. This occurs when servers downgrade HTTP/2 requests to HTTP/1.1 without properly validating header names/values, enabling attackers to manipulate request boundaries and bypass security controls."}]}, {"name": "hdbscan", "version": "0.8.40", "vulns": []}, {"name": "hf-xet", "version": "1.1.5", "vulns": []}, {"name": "holoviews", "version": "1.21.0", "vulns": []}, {"name": "hpack", "version": "4.1.0", "vulns": []}, {"name": "htmlmin", "version": "0.1.12", "vulns": []}, {"name": "httpcore", "version": "1.0.9", "vulns": []}, {"name": "httplib2", "version": "0.22.0", "vulns": []}, {"name": "httptools", "version": "0.6.4", "vulns": []}, {"name": "httpx", "version": "0.27.0", "vulns": []}, {"name": "huggingface-hub", "version": "0.34.4", "vulns": []}, {"name": "humanfriendly", "version": "10.0", "vulns": []}, {"name": "hvplot", "version": "0.11.3", "vulns": []}, {"name": "hydra-core", "version": "1.3.2", "vulns": []}, {"name": "hyperframe", "version": "6.1.0", "vulns": []}, {"name": "identify", "version": "2.6.12", "vulns": []}, {"name": "idna", "version": "3.10", "vulns": []}, {"name": "imagehash", "version": "4.3.1", "vulns": []}, {"name": "importlib-metadata", "version": "8.7.0", "vulns": []}, {"name": "importlib-resources", "version": "6.5.2", "vulns": []}, {"name": "iniconfig", "version": "2.1.0", "vulns": []}, {"name": "ipykernel", "version": "6.30.0", "vulns": []}, {"name": "ipympl", "version": "0.9.7", "vulns": []}, {"name": "ipython", "version": "9.4.0", "vulns": []}, {"name": "ipython-pygments-lexers", "version": "1.1.1", "vulns": []}, {"name": "ipyvizzu", "version": "0.18.0", "vulns": []}, {"name": "ipywidgets", "version": "8.1.7", "vulns": []}, {"name": "isoduration", "version": "20.11.0", "vulns": []}, {"name": "isort", "version": "5.12.0", "vulns": []}, {"name": "itsdangerous", "version": "2.2.0", "vulns": []}, {"name": "jedi", "version": "0.19.2", "vulns": []}, {"name": "jinja2", "version": "3.1.4", "vulns": [{"id": "GHSA-q2x7-8rv6-6q7h", "fix_versions": ["3.1.5"], "aliases": ["CVE-2024-56326"], "description": "An oversight in how the Jinja sandboxed environment detects calls to `str.format` allows an attacker that controls the content of a template to execute arbitrary Python code.  To exploit the vulnerability, an attacker needs to control the content of a template. Whether that is the case depends on the type of application using Jinja. This vulnerability impacts users of applications which execute untrusted templates.  Jinja's sandbox does catch calls to `str.format` and ensures they don't escape the sandbox. However, it's possible to store a reference to a malicious string's `format` method, then pass that to a filter that calls it. No such filters are built-in to Jinja, but could be present through custom filters in an application. After the fix, such indirect calls are also handled by the sandbox."}, {"id": "GHSA-gmj6-6f8f-6699", "fix_versions": ["3.1.5"], "aliases": ["CVE-2024-56201"], "description": "A bug in the Jinja compiler allows an attacker that controls both the content and filename of a template to execute arbitrary Python code, regardless of if Jinja's sandbox is used.  To exploit the vulnerability, an attacker needs to control both the filename and the contents of a template. Whether that is the case depends on the type of application using Jinja. This vulnerability impacts users of applications which execute untrusted templates where the template author can also choose the template filename."}, {"id": "GHSA-cpwx-vrp4-4pq7", "fix_versions": ["3.1.6"], "aliases": ["CVE-2025-27516"], "description": "An oversight in how the Jinja sandboxed environment interacts with the `|attr` filter allows an attacker that controls the content of a template to execute arbitrary Python code.  To exploit the vulnerability, an attacker needs to control the content of a template. Whether that is the case depends on the type of application using Jinja. This vulnerability impacts users of applications which execute untrusted templates.  Jinja's sandbox does catch calls to `str.format` and ensures they don't escape the sandbox. However, it's possible to use the `|attr` filter to get a reference to a string's plain format method, bypassing the sandbox. After the fix, the `|attr` filter no longer bypasses the environment's attribute lookup."}]}, {"name": "jiter", "version": "0.10.0", "vulns": []}, {"name": "joblib", "version": "1.5.1", "vulns": []}, {"name": "json5", "version": "0.12.0", "vulns": []}, {"name": "jsonpickle", "version": "4.1.1", "vulns": []}, {"name": "jsonpointer", "version": "3.0.0", "vulns": []}, {"name": "jsonschema", "version": "4.23.0", "vulns": []}, {"name": "jsonschema-specifications", "version": "2025.4.1", "vulns": []}, {"name": "jupyter-client", "version": "8.6.3", "vulns": []}, {"name": "jupyter-core", "version": "5.8.1", "vulns": []}, {"name": "jupyter-events", "version": "0.12.0", "vulns": []}, {"name": "jupyter-lsp", "version": "2.2.6", "vulns": []}, {"name": "jupyter-server", "version": "2.16.0", "vulns": []}, {"name": "jupyter-server-terminals", "version": "0.5.3", "vulns": []}, {"name": "jupyterlab", "version": "4.4.5", "vulns": [{"id": "GHSA-vvfj-2jqx-52jm", "fix_versions": ["4.4.8"], "aliases": ["CVE-2025-59842"], "description": "Links generated with LaTeX typesetters in Markdown files and Markdown cells in JupyterLab and Jupyter Notebook did not include the `noopener` attribute.  This is deemed to have no impact on the default installations. Theoretically users of third-party LaTeX-rendering extensions could find themselves vulnerable to reverse tabnabbing attacks if: - links generated by those extensions included `target=_blank` (no such extensions are known at time of writing) and - they were to click on a link generated in LaTeX (typically visibly different from other links).  For consistency with handling on other links, new versions of JupyterLab will enforce `noopener` and `target=_blank` on all links generated by typesetters. The former will harden the resilience of JupyterLab to extensions with lack of secure defaults in link rendering, and the latter will improve user experience by preventing accidental state loss when clicking on links rendered by LaTeX typesetters.  ### Impact  Since the official LaTeX typesetter extensions for JupyterLab: `jupyterlab-mathjax` (default), `jupyterlab-mathjax2` and `jupyterlab-katex` do not include the `target=_blank`, there is no impact for JupyterLab users.  ### Patches  JupyterLab 4.4.8  ### Workarounds  No workarounds are necessary.  ### References  None"}]}, {"name": "jupyterlab-pygments", "version": "0.3.0", "vulns": []}, {"name": "jupyterlab-server", "version": "2.27.3", "vulns": []}, {"name": "jupyterlab-widgets", "version": "3.0.15", "vulns": []}, {"name": "kaggle", "version": "1.7.4.5", "vulns": []}, {"name": "kiwisolver", "version": "1.4.8", "vulns": []}, {"name": "kneed", "version": "0.8.5", "vulns": []}, {"name": "kubernetes", "version": "33.1.0", "vulns": []}, {"name": "lark", "version": "1.2.2", "vulns": []}, {"name": "license-expression", "version": "30.4.4", "vulns": []}, {"name": "linkify-it-py", "version": "2.0.3", "vulns": []}, {"name": "llvmlite", "version": "0.44.0", "vulns": []}, {"name": "locket", "version": "1.0.0", "vulns": []}, {"name": "loguru", "version": "0.7.3", "vulns": []}, {"name": "mako", "version": "1.3.10", "vulns": []}, {"name": "mando", "version": "0.7.1", "vulns": []}, {"name": "markdown", "version": "3.8.2", "vulns": []}, {"name": "markdown-it-py", "version": "3.0.0", "vulns": []}, {"name": "markupsafe", "version": "3.0.2", "vulns": []}, {"name": "marshmallow", "version": "4.0.1", "vulns": []}, {"name": "matplotlib", "version": "3.9.2", "vulns": []}, {"name": "matplotlib-inline", "version": "0.1.7", "vulns": []}, {"name": "mccabe", "version": "0.7.0", "vulns": []}, {"name": "mdit-py-plugins", "version": "0.4.2", "vulns": []}, {"name": "mdurl", "version": "0.1.2", "vulns": []}, {"name": "mistune", "version": "3.1.3", "vulns": []}, {"name": "mlflow", "version": "3.1.4", "vulns": [{"id": "GHSA-wf7f-8fxf-xfxc", "fix_versions": [], "aliases": ["CVE-2024-37059"], "description": "Deserialization of untrusted data can occur in versions of the MLflow platform running version 0.5.0 or newer, enabling a maliciously uploaded PyTorch model to run arbitrary code on an end user\u2019s system when interacted with."}]}, {"name": "mlflow-skinny", "version": "3.1.4", "vulns": []}, {"name": "mmh3", "version": "5.2.0", "vulns": []}, {"name": "mpmath", "version": "1.3.0", "vulns": []}, {"name": "msgpack", "version": "1.1.2", "vulns": []}, {"name": "multidict", "version": "6.6.3", "vulns": []}, {"name": "multimethod", "version": "1.12", "vulns": []}, {"name": "multiprocess", "version": "0.70.15", "vulns": []}, {"name": "mypy", "version": "1.11.2", "vulns": []}, {"name": "mypy-extensions", "version": "1.1.0", "vulns": []}, {"name": "narwhals", "version": "1.48.1", "vulns": []}, {"name": "nbclient", "version": "0.10.2", "vulns": []}, {"name": "nbconvert", "version": "7.16.6", "vulns": []}, {"name": "nbformat", "version": "5.10.4", "vulns": []}, {"name": "nest-asyncio", "version": "1.6.0", "vulns": []}, {"name": "networkx", "version": "3.5", "vulns": []}, {"name": "nltk", "version": "3.9.2", "vulns": []}, {"name": "nodeenv", "version": "1.9.1", "vulns": []}, {"name": "notebook-shim", "version": "0.2.4", "vulns": []}, {"name": "numba", "version": "0.61.0", "vulns": []}, {"name": "numpy", "version": "2.1.1", "vulns": []}, {"name": "oauthlib", "version": "3.3.1", "vulns": []}, {"name": "omegaconf", "version": "2.3.0", "vulns": []}, {"name": "onnxruntime", "version": "1.22.1", "vulns": []}, {"name": "openai", "version": "1.50.2", "vulns": []}, {"name": "openpyxl", "version": "3.1.5", "vulns": []}, {"name": "opentelemetry-api", "version": "1.37.0", "vulns": []}, {"name": "opentelemetry-exporter-otlp-proto-common", "version": "1.37.0", "vulns": []}, {"name": "opentelemetry-exporter-otlp-proto-grpc", "version": "1.37.0", "vulns": []}, {"name": "opentelemetry-proto", "version": "1.37.0", "vulns": []}, {"name": "opentelemetry-sdk", "version": "1.37.0", "vulns": []}, {"name": "opentelemetry-semantic-conventions", "version": "0.58b0", "vulns": []}, {"name": "optuna", "version": "4.4.0", "vulns": []}, {"name": "orjson", "version": "3.11.3", "vulns": []}, {"name": "overrides", "version": "7.7.0", "vulns": []}, {"name": "packageurl-python", "version": "0.17.5", "vulns": []}, {"name": "packaging", "version": "25.0", "vulns": []}, {"name": "pandarallel", "version": "1.6.5", "vulns": []}, {"name": "pandas", "version": "2.2.2", "vulns": []}, {"name": "pandas-flavor", "version": "0.7.0", "vulns": []}, {"name": "pandas-gbq", "version": "0.29.2", "vulns": []}, {"name": "pandocfilters", "version": "1.5.1", "vulns": []}, {"name": "panel", "version": "1.7.5", "vulns": []}, {"name": "param", "version": "2.2.1", "vulns": []}, {"name": "parso", "version": "0.8.4", "vulns": []}, {"name": "partd", "version": "1.4.2", "vulns": []}, {"name": "passlib", "version": "1.7.4", "vulns": []}, {"name": "pathspec", "version": "0.12.1", "vulns": []}, {"name": "patsy", "version": "1.0.1", "vulns": []}, {"name": "peft", "version": "0.7.1", "vulns": []}, {"name": "pexpect", "version": "4.9.0", "vulns": []}, {"name": "phik", "version": "0.12.5", "vulns": []}, {"name": "pillow", "version": "11.3.0", "vulns": []}, {"name": "pingouin", "version": "0.5.5", "vulns": []}, {"name": "pip", "version": "25.2", "vulns": [{"id": "GHSA-4xh5-x5gv-qwph", "fix_versions": [], "aliases": ["CVE-2025-8869"], "description": "### Summary  In the fallback extraction path for source distributions, `pip` used Python\u2019s `tarfile` module without verifying that symbolic/hard link targets resolve inside the intended extraction directory. A malicious sdist can include links that escape the target directory and overwrite arbitrary files on the invoking host during `pip install`.  ### Impact  Successful exploitation enables arbitrary file overwrite outside the build/extraction directory on the machine running `pip`. This can be leveraged to tamper with configuration or startup files and may lead to further code execution depending on the environment, but the direct, guaranteed impact is integrity compromise on the vulnerable system.  ### Conditions  The issue is triggered when installing an attacker-controlled sdist (e.g., from an index or URL) and the fallback extraction code path is used. No special privileges are required beyond running `pip install`; active user action is necessary.  ### Remediation  The [fix](https://github.com/pypa/pip/pull/13550), while available as a patch that can be manually applied, has not yet been put into a numbered version but is planned for `25.3`. Using a Python interpreter that implements the safe-extraction behavior described by **PEP 706** provides additional defense in depth for other `tarfile` issues but is not a substitute for upgrading pip for this specific flaw."}]}, {"name": "pip-api", "version": "0.0.34", "vulns": []}, {"name": "pip-audit", "version": "2.9.0", "vulns": []}, {"name": "pip-licenses", "version": "5.0.0", "vulns": []}, {"name": "pip-requirements-parser", "version": "32.0.1", "vulns": []}, {"name": "pipdeptree", "version": "2.29.0", "vulns": []}, {"name": "platformdirs", "version": "4.3.8", "vulns": []}, {"name": "plotly", "version": "6.2.0", "vulns": []}, {"name": "plotpointe", "skip_reason": "Dependency not found on PyPI and could not be audited: plotpointe (0.1.0)"}, {"name": "pluggy", "version": "1.6.0", "vulns": []}, {"name": "polars", "version": "1.31.0", "vulns": []}, {"name": "portalocker", "version": "3.2.0", "vulns": []}, {"name": "posthog", "version": "5.4.0", "vulns": []}, {"name": "praw", "version": "7.7.1", "vulns": []}, {"name": "prawcore", "version": "2.4.0", "vulns": []}, {"name": "pre-commit", "version": "4.2.0", "vulns": []}, {"name": "prettytable", "version": "3.16.0", "vulns": []}, {"name": "prometheus-client", "version": "0.20.0", "vulns": []}, {"name": "prometheus-fastapi-instrumentator", "version": "7.0.0", "vulns": []}, {"name": "prompt-toolkit", "version": "3.0.51", "vulns": []}, {"name": "propcache", "version": "0.3.2", "vulns": []}, {"name": "proto-plus", "version": "1.26.1", "vulns": []}, {"name": "protobuf", "version": "6.32.1", "vulns": []}, {"name": "psutil", "version": "7.0.0", "vulns": []}, {"name": "psycopg2-binary", "version": "2.9.9", "vulns": []}, {"name": "ptyprocess", "version": "0.7.0", "vulns": []}, {"name": "pure-eval", "version": "0.2.3", "vulns": []}, {"name": "puremagic", "version": "1.30", "vulns": []}, {"name": "py-cpuinfo", "version": "9.0.0", "vulns": []}, {"name": "py-serializable", "version": "2.1.0", "vulns": []}, {"name": "pyarrow", "version": "16.1.0", "vulns": [{"id": "PYSEC-2024-161", "fix_versions": ["17.0.0"], "aliases": ["CVE-2024-52338"], "description": "Deserialization of untrusted data in IPC and Parquet readers in the Apache Arrow R package versions\u00a04.0.0 through 16.1.0 allows arbitrary code execution. An application is vulnerable if it  reads Arrow IPC, Feather or Parquet data from untrusted sources (for  example, user-supplied input files). This vulnerability only affects the arrow R package, not other Apache Arrow  implementations or bindings unless those bindings are specifically used via the R package (for example, an R application that embeds a Python interpreter and uses PyArrow to read files from untrusted sources is still vulnerable if the arrow R package is an affected version). It is recommended that users of the arrow R package upgrade to 17.0.0 or later. Similarly, it  is recommended that downstream libraries upgrade their dependency  requirements to arrow 17.0.0 or later. If using an affected version of the package, untrusted data can read into a Table and its internal to_data_frame() method can be used as a workaround (e.g., read_parquet(..., as_data_frame = FALSE)$to_data_frame()).   This issue affects the Apache Arrow R package: from 4.0.0 through 16.1.0.   Users are recommended to upgrade to version 17.0.0, which fixes the issue."}]}, {"name": "pyarrow-hotfix", "version": "0.7", "vulns": []}, {"name": "pyasn1", "version": "0.6.1", "vulns": []}, {"name": "pyasn1-modules", "version": "0.4.2", "vulns": []}, {"name": "pybase64", "version": "1.4.2", "vulns": []}, {"name": "pycodestyle", "version": "2.14.0", "vulns": []}, {"name": "pycparser", "version": "2.22", "vulns": []}, {"name": "pydantic", "version": "2.9.1", "vulns": []}, {"name": "pydantic-core", "version": "2.23.3", "vulns": []}, {"name": "pydantic-settings", "version": "2.5.2", "vulns": []}, {"name": "pydata-google-auth", "version": "1.9.1", "vulns": []}, {"name": "pydeck", "version": "0.9.1", "vulns": []}, {"name": "pyflakes", "version": "3.4.0", "vulns": []}, {"name": "pygments", "version": "2.19.2", "vulns": []}, {"name": "pylint", "version": "3.3.9", "vulns": []}, {"name": "pynndescent", "version": "0.5.13", "vulns": []}, {"name": "pyparsing", "version": "3.2.3", "vulns": []}, {"name": "pyphen", "version": "0.17.2", "vulns": []}, {"name": "pypika", "version": "0.48.9", "vulns": []}, {"name": "pyproject-hooks", "version": "1.2.0", "vulns": []}, {"name": "pytest", "version": "8.3.3", "vulns": []}, {"name": "pytest-benchmark", "version": "5.1.0", "vulns": []}, {"name": "pytest-cov", "version": "5.0.0", "vulns": []}, {"name": "pytest-timeout", "version": "2.4.0", "vulns": []}, {"name": "python-dateutil", "version": "2.9.0.post0", "vulns": []}, {"name": "python-dotenv", "version": "1.0.1", "vulns": []}, {"name": "python-jose", "version": "3.3.0", "vulns": [{"id": "PYSEC-2024-232", "fix_versions": ["3.4.0"], "aliases": ["CVE-2024-33663"], "description": "python-jose through 3.3.0 has algorithm confusion with OpenSSH ECDSA keys and other key formats. This is similar to CVE-2022-29217."}, {"id": "PYSEC-2024-233", "fix_versions": ["3.4.0"], "aliases": ["CVE-2024-33664"], "description": "python-jose through 3.3.0 allows attackers to cause a denial of service (resource consumption) during a decode via a crafted JSON Web Encryption (JWE) token with a high compression ratio, aka a \"JWT bomb.\" This is similar to CVE-2024-21319."}]}, {"name": "python-json-logger", "version": "3.3.0", "vulns": []}, {"name": "python-multipart", "version": "0.0.20", "vulns": []}, {"name": "python-slugify", "version": "8.0.4", "vulns": []}, {"name": "pytz", "version": "2025.2", "vulns": []}, {"name": "pyvis", "version": "0.3.2", "vulns": []}, {"name": "pyviz-comms", "version": "3.0.6", "vulns": []}, {"name": "pywavelets", "version": "1.8.0", "vulns": []}, {"name": "pyyaml", "version": "6.0.2", "vulns": []}, {"name": "pyzmq", "version": "27.0.0", "vulns": []}, {"name": "qdrant-client", "version": "1.15.0", "vulns": []}, {"name": "radon", "version": "6.0.1", "vulns": []}, {"name": "rank-bm25", "version": "0.2.2", "vulns": []}, {"name": "redis", "version": "6.2.0", "vulns": []}, {"name": "referencing", "version": "0.36.2", "vulns": []}, {"name": "regex", "version": "2024.11.6", "vulns": []}, {"name": "reportlab", "version": "4.4.3", "vulns": []}, {"name": "requests", "version": "2.32.4", "vulns": []}, {"name": "requests-oauthlib", "version": "2.0.0", "vulns": []}, {"name": "researchpy", "version": "0.3.6", "vulns": []}, {"name": "rfc3339-validator", "version": "0.1.4", "vulns": []}, {"name": "rfc3986-validator", "version": "0.1.1", "vulns": []}, {"name": "rfc3987-syntax", "version": "1.1.0", "vulns": []}, {"name": "rich", "version": "14.0.0", "vulns": []}, {"name": "rich-toolkit", "version": "0.15.1", "vulns": []}, {"name": "rpds-py", "version": "0.26.0", "vulns": []}, {"name": "rsa", "version": "4.9.1", "vulns": []}, {"name": "ruamel-yaml", "version": "0.18.15", "vulns": []}, {"name": "ruamel-yaml-clib", "version": "0.2.14", "vulns": []}, {"name": "ruff", "version": "0.6.9", "vulns": []}, {"name": "safetensors", "version": "0.5.3", "vulns": []}, {"name": "safety", "version": "3.6.2", "vulns": []}, {"name": "safety-schemas", "version": "0.0.16", "vulns": []}, {"name": "scikit-learn", "version": "1.7.1", "vulns": []}, {"name": "scikit-posthocs", "version": "0.11.4", "vulns": []}, {"name": "scipy", "version": "1.15.3", "vulns": []}, {"name": "seaborn", "version": "0.13.2", "vulns": []}, {"name": "send2trash", "version": "1.8.3", "vulns": []}, {"name": "sentence-transformers", "version": "5.0.0", "vulns": []}, {"name": "setuptools", "version": "80.9.0", "vulns": []}, {"name": "shellingham", "version": "1.5.4", "vulns": []}, {"name": "six", "version": "1.17.0", "vulns": []}, {"name": "smmap", "version": "5.0.2", "vulns": []}, {"name": "sniffio", "version": "1.3.1", "vulns": []}, {"name": "sortedcontainers", "version": "2.4.0", "vulns": []}, {"name": "soupsieve", "version": "2.7", "vulns": []}, {"name": "sqlalchemy", "version": "2.0.35", "vulns": []}, {"name": "sqlglot", "version": "25.6.1", "vulns": []}, {"name": "sqlparse", "version": "0.5.3", "vulns": []}, {"name": "stack-data", "version": "0.6.3", "vulns": []}, {"name": "starlette", "version": "0.37.2", "vulns": [{"id": "GHSA-f96h-pmfr-66vw", "fix_versions": ["0.40.0"], "aliases": ["CVE-2024-47874"], "description": "### Summary Starlette treats `multipart/form-data` parts without a `filename` as text form fields and buffers those in byte strings with no size limit. This allows an attacker to upload arbitrary large form fields and cause Starlette to both slow down significantly due to excessive memory allocations and copy operations, and also consume more and more memory until the server starts swapping and grinds to a halt, or the OS terminates the server process with an OOM error. Uploading multiple such requests in parallel may be enough to render a service practically unusable, even if reasonable request size limits are enforced by a reverse proxy in front of Starlette.  ### PoC  ```python from starlette.applications import Starlette from starlette.routing import Route  async def poc(request):     async with request.form():         pass  app = Starlette(routes=[     Route('/', poc, methods=[\"POST\"]), ]) ```  ```sh curl http://localhost:8000 -F 'big=</dev/urandom' ```  ### Impact This Denial of service (DoS) vulnerability affects all applications built with Starlette (or FastAPI) accepting form requests. "}, {"id": "GHSA-2c2j-9gv5-cj73", "fix_versions": ["0.47.2"], "aliases": ["CVE-2025-54121"], "description": "### Summary When parsing a multi-part form with large files (greater than the [default max spool size](https://github.com/encode/starlette/blob/fa5355442753f794965ae1af0f87f9fec1b9a3de/starlette/formparsers.py#L126)) `starlette` will block the main thread to roll the file over to disk. This blocks the event thread which means we can't accept new connections.  ### Details Please see this discussion for details: https://github.com/encode/starlette/discussions/2927#discussioncomment-13721403. In summary the following UploadFile code (copied from [here](https://github.com/encode/starlette/blob/fa5355442753f794965ae1af0f87f9fec1b9a3de/starlette/datastructures.py#L436C5-L447C14)) has a minor bug. Instead of just checking for `self._in_memory` we should also check if the additional bytes will cause a rollover.  ```python      @property     def _in_memory(self) -> bool:         # check for SpooledTemporaryFile._rolled         rolled_to_disk = getattr(self.file, \"_rolled\", True)         return not rolled_to_disk      async def write(self, data: bytes) -> None:         if self.size is not None:             self.size += len(data)          if self._in_memory:             self.file.write(data)         else:             await run_in_threadpool(self.file.write, data) ```  I have already created a PR which fixes the problem: https://github.com/encode/starlette/pull/2962   ### PoC See the discussion [here](https://github.com/encode/starlette/discussions/2927#discussioncomment-13721403) for steps on how to reproduce.  ### Impact To be honest, very low and not many users will be impacted. Parsing large forms is already CPU intensive so the additional IO block doesn't slow down `starlette` that much on systems with modern HDDs/SSDs. If someone is running on tape they might see a greater impact."}]}, {"name": "statsmodels", "version": "0.14.5", "vulns": []}, {"name": "stevedore", "version": "5.5.0", "vulns": []}, {"name": "streamlit", "version": "1.47.1", "vulns": []}, {"name": "structlog", "version": "23.2.0", "vulns": []}, {"name": "sympy", "version": "1.14.0", "vulns": []}, {"name": "tabulate", "version": "0.9.0", "vulns": []}, {"name": "tenacity", "version": "8.2.3", "vulns": []}, {"name": "terminado", "version": "0.18.1", "vulns": []}, {"name": "text-unidecode", "version": "1.3", "vulns": []}, {"name": "textstat", "version": "0.7.8", "vulns": []}, {"name": "threadpoolctl", "version": "3.6.0", "vulns": []}, {"name": "tiktoken", "version": "0.9.0", "vulns": []}, {"name": "tinycss2", "version": "1.4.0", "vulns": []}, {"name": "tokenizers", "version": "0.15.2", "vulns": []}, {"name": "toml", "version": "0.10.2", "vulns": []}, {"name": "tomli", "version": "2.3.0", "vulns": []}, {"name": "tomlkit", "version": "0.13.3", "vulns": []}, {"name": "toolz", "version": "1.0.0", "vulns": []}, {"name": "torch", "version": "2.7.1", "vulns": [{"id": "GHSA-887c-mr87-cxwp", "fix_versions": ["2.8.0"], "aliases": ["CVE-2025-3730"], "description": "A vulnerability, which was classified as problematic, was found in PyTorch 2.6.0. Affected is the function torch.nn.functional.ctc_loss of the file aten/src/ATen/native/LossCTC.cpp. The manipulation leads to denial of service. An attack has to be approached locally. The exploit has been disclosed to the public and may be used. The name of the patch is 46fc5d8e360127361211cb237d5f9eef0223e567. It is recommended to apply a patch to fix this issue."}]}, {"name": "tornado", "version": "6.5.1", "vulns": []}, {"name": "tqdm", "version": "4.67.1", "vulns": []}, {"name": "traitlets", "version": "5.14.3", "vulns": []}, {"name": "transformers", "version": "4.36.0", "vulns": [{"id": "PYSEC-2024-227", "fix_versions": ["4.48.0"], "aliases": ["CVE-2024-11392"], "description": "Hugging Face Transformers MobileViTV2 Deserialization of Untrusted Data Remote Code Execution Vulnerability. This vulnerability allows remote attackers to execute arbitrary code on affected installations of Hugging Face Transformers. User interaction is required to exploit this vulnerability in that the target must visit a malicious page or open a malicious file.  The specific flaw exists within the handling of configuration files. The issue results from the lack of proper validation of user-supplied data, which can result in deserialization of untrusted data. An attacker can leverage this vulnerability to execute code in the context of the current user. Was ZDI-CAN-24322."}, {"id": "PYSEC-2024-228", "fix_versions": ["4.48.0"], "aliases": ["CVE-2024-11393"], "description": "Hugging Face Transformers MaskFormer Model Deserialization of Untrusted Data Remote Code Execution Vulnerability. This vulnerability allows remote attackers to execute arbitrary code on affected installations of Hugging Face Transformers. User interaction is required to exploit this vulnerability in that the target must visit a malicious page or open a malicious file.  The specific flaw exists within the parsing of model files. The issue results from the lack of proper validation of user-supplied data, which can result in deserialization of untrusted data. An attacker can leverage this vulnerability to execute code in the context of the current user. Was ZDI-CAN-25191."}, {"id": "PYSEC-2024-229", "fix_versions": ["4.48.0"], "aliases": ["CVE-2024-11394"], "description": "Hugging Face Transformers Trax Model Deserialization of Untrusted Data Remote Code Execution Vulnerability. This vulnerability allows remote attackers to execute arbitrary code on affected installations of Hugging Face Transformers. User interaction is required to exploit this vulnerability in that the target must visit a malicious page or open a malicious file.  The specific flaw exists within the handling of model files. The issue results from the lack of proper validation of user-supplied data, which can result in deserialization of untrusted data. An attacker can leverage this vulnerability to execute code in the context of the current user. Was ZDI-CAN-25012."}, {"id": "PYSEC-2025-40", "fix_versions": ["4.49.0"], "aliases": ["CVE-2025-2099"], "description": "A vulnerability in the `preprocess_string()` function of the `transformers.testing_utils` module in huggingface/transformers version v4.48.3 allows for a Regular Expression Denial of Service (ReDoS) attack. The regular expression used to process code blocks in docstrings contains nested quantifiers, leading to exponential backtracking when processing input with a large number of newline characters. An attacker can exploit this by providing a specially crafted payload, causing high CPU usage and potential application downtime, effectively resulting in a Denial of Service (DoS) scenario."}, {"id": "GHSA-37q5-v5qm-c9v8", "fix_versions": ["4.38.0"], "aliases": ["CVE-2024-3568"], "description": "The huggingface/transformers library is vulnerable to arbitrary code execution through deserialization of untrusted data within the `load_repo_checkpoint()` function of the `TFPreTrainedModel()` class. Attackers can execute arbitrary code and commands by crafting a malicious serialized payload, exploiting the use of `pickle.load()` on data from potentially untrusted sources. This vulnerability allows for remote code execution (RCE) by deceiving victims into loading a seemingly harmless checkpoint during a normal training process, thereby enabling attackers to execute arbitrary code on the targeted machine."}, {"id": "GHSA-6rvg-6v2m-4j46", "fix_versions": ["4.48.0"], "aliases": ["CVE-2024-12720"], "description": "A Regular Expression Denial of Service (ReDoS) vulnerability was identified in the huggingface/transformers library, specifically in the file tokenization_nougat_fast.py. The vulnerability occurs in the post_process_single() function, where a regular expression processes specially crafted input. The issue stems from the regex exhibiting exponential time complexity under certain conditions, leading to excessive backtracking. This can result in significantly high CPU usage and potential application downtime, effectively creating a Denial of Service (DoS) scenario. The affected version is v4.46.3."}, {"id": "GHSA-fpwr-67px-3qhx", "fix_versions": ["4.50.0"], "aliases": ["CVE-2025-1194"], "description": "A Regular Expression Denial of Service (ReDoS) vulnerability was identified in the huggingface/transformers library, specifically in the file `tokenization_gpt_neox_japanese.py` of the GPT-NeoX-Japanese model. The vulnerability occurs in the SubWordJapaneseTokenizer class, where regular expressions process specially crafted inputs. The issue stems from a regex exhibiting exponential complexity under certain conditions, leading to excessive backtracking. This can result in high CPU usage and potential application downtime, effectively creating a Denial of Service (DoS) scenario. The affected version is v4.48.1 (latest)."}, {"id": "GHSA-q2wp-rjmx-x6x9", "fix_versions": ["4.51.0"], "aliases": ["CVE-2025-3263"], "description": "A Regular Expression Denial of Service (ReDoS) vulnerability was discovered in the Hugging Face Transformers library, specifically in the `get_configuration_file()` function within the `transformers.configuration_utils` module. The affected version is 4.49.0, and the issue is resolved in version 4.51.0. The vulnerability arises from the use of a regular expression pattern `config\\.(.*)\\.json` that can be exploited to cause excessive CPU consumption through crafted input strings, leading to catastrophic backtracking. This can result in model serving disruption, resource exhaustion, and increased latency in applications using the library."}, {"id": "GHSA-jjph-296x-mrcr", "fix_versions": ["4.51.0"], "aliases": ["CVE-2025-3264"], "description": "A Regular Expression Denial of Service (ReDoS) vulnerability was discovered in the Hugging Face Transformers library, specifically in the `get_imports()` function within `dynamic_module_utils.py`. This vulnerability affects versions 4.49.0 and is fixed in version 4.51.0. The issue arises from a regular expression pattern `\\s*try\\s*:.*?except.*?:` used to filter out try/except blocks from Python code, which can be exploited to cause excessive CPU consumption through crafted input strings due to catastrophic backtracking. This vulnerability can lead to remote code loading disruption, resource exhaustion in model serving, supply chain attack vectors, and development pipeline disruption."}, {"id": "GHSA-phhr-52qp-3mj4", "fix_versions": ["4.52.1"], "aliases": ["CVE-2025-3777"], "description": "Hugging Face Transformers versions up to 4.49.0 are affected by an improper input validation vulnerability in the `image_utils.py` file. The vulnerability arises from insecure URL validation using the `startswith()` method, which can be bypassed through URL username injection. This allows attackers to craft URLs that appear to be from YouTube but resolve to malicious domains, potentially leading to phishing attacks, malware distribution, or data exfiltration. The issue is fixed in version 4.52.1."}, {"id": "GHSA-37mw-44qp-f5jm", "fix_versions": ["4.52.1"], "aliases": ["CVE-2025-3933"], "description": "A Regular Expression Denial of Service (ReDoS) vulnerability was discovered in the Hugging Face Transformers library, specifically within the DonutProcessor class's `token2json()` method. This vulnerability affects versions 4.51.3 and earlier, and is fixed in version 4.52.1. The issue arises from the regex pattern `<s_(.*?)>` which can be exploited to cause excessive CPU consumption through crafted input strings due to catastrophic backtracking. This vulnerability can lead to service disruption, resource exhaustion, and potential API service vulnerabilities, impacting document processing tasks using the Donut model."}, {"id": "GHSA-9356-575x-2w9m", "fix_versions": ["4.53.0"], "aliases": ["CVE-2025-5197"], "description": "A Regular Expression Denial of Service (ReDoS) vulnerability exists in the Hugging Face Transformers library, specifically in the `convert_tf_weight_name_to_pt_weight_name()` function. This function, responsible for converting TensorFlow weight names to PyTorch format, uses a regex pattern `/[^/]*___([^/]*)/` that can be exploited to cause excessive CPU consumption through crafted input strings due to catastrophic backtracking. The vulnerability affects versions up to 4.51.3 and is fixed in version 4.53.0. This issue can lead to service disruption, resource exhaustion, and potential API service vulnerabilities, impacting model conversion processes between TensorFlow and PyTorch formats."}, {"id": "GHSA-59p9-h35m-wg4g", "fix_versions": ["4.53.0"], "aliases": ["CVE-2025-6638"], "description": "A Regular Expression Denial of Service (ReDoS) vulnerability was discovered in the Hugging Face Transformers library, specifically affecting the MarianTokenizer's `remove_language_code()` method. This vulnerability is present in version 4.52.4 and has been fixed in version 4.53.0. The issue arises from inefficient regex processing, which can be exploited by crafted input strings containing malformed language code patterns, leading to excessive CPU consumption and potential denial of service."}, {"id": "GHSA-rcv9-qm8p-9p6j", "fix_versions": ["4.53.0"], "aliases": ["CVE-2025-6051"], "description": "A Regular Expression Denial of Service (ReDoS) vulnerability was discovered in the Hugging Face Transformers library, specifically within the `normalize_numbers()` method of the `EnglishNormalizer` class. This vulnerability affects versions up to 4.52.4 and is fixed in version 4.53.0. The issue arises from the method's handling of numeric strings, which can be exploited using crafted input strings containing long sequences of digits, leading to excessive CPU consumption. This vulnerability impacts text-to-speech and number normalization tasks, potentially causing service disruption, resource exhaustion, and API vulnerabilities."}, {"id": "GHSA-4w7r-h757-3r74", "fix_versions": ["4.53.0"], "aliases": ["CVE-2025-6921"], "description": "The huggingface/transformers library, versions prior to 4.53.0, is vulnerable to Regular Expression Denial of Service (ReDoS) in the AdamWeightDecay optimizer. The vulnerability arises from the _do_use_weight_decay method, which processes user-controlled regular expressions in the include_in_weight_decay and exclude_from_weight_decay lists. Malicious regular expressions can cause catastrophic backtracking during the re.search call, leading to 100% CPU utilization and a denial of service. This issue can be exploited by attackers who can control the patterns in these lists, potentially causing the machine learning task to hang and rendering services unresponsive."}]}, {"name": "typeguard", "version": "4.4.4", "vulns": []}, {"name": "typer", "version": "0.19.1", "vulns": []}, {"name": "types-python-dateutil", "version": "2.9.0.20250708", "vulns": []}, {"name": "typing-extensions", "version": "4.14.1", "vulns": []}, {"name": "typing-inspection", "version": "0.4.1", "vulns": []}, {"name": "tzdata", "version": "2025.2", "vulns": []}, {"name": "uc-micro-py", "version": "1.0.3", "vulns": []}, {"name": "ujson", "version": "5.11.0", "vulns": []}, {"name": "umap-learn", "version": "0.5.9.post2", "vulns": []}, {"name": "update-checker", "version": "0.18.0", "vulns": []}, {"name": "uri-template", "version": "1.3.0", "vulns": []}, {"name": "uritemplate", "version": "4.2.0", "vulns": []}, {"name": "urllib3", "version": "2.5.0", "vulns": []}, {"name": "uvicorn", "version": "0.30.0", "vulns": []}, {"name": "uvloop", "version": "0.21.0", "vulns": []}, {"name": "virtualenv", "version": "20.32.0", "vulns": []}, {"name": "visions", "version": "0.8.1", "vulns": []}, {"name": "watchfiles", "version": "1.1.0", "vulns": []}, {"name": "wcwidth", "version": "0.2.13", "vulns": []}, {"name": "webcolors", "version": "24.11.1", "vulns": []}, {"name": "webencodings", "version": "0.5.1", "vulns": []}, {"name": "websocket-client", "version": "1.8.0", "vulns": []}, {"name": "websockets", "version": "15.0.1", "vulns": []}, {"name": "werkzeug", "version": "3.1.3", "vulns": []}, {"name": "wheel", "version": "0.45.1", "vulns": []}, {"name": "widgetsnbextension", "version": "4.0.14", "vulns": []}, {"name": "wordcloud", "version": "1.9.4", "vulns": []}, {"name": "xarray", "version": "2025.7.1", "vulns": []}, {"name": "xgboost", "version": "3.0.2", "vulns": []}, {"name": "xxhash", "version": "3.5.0", "vulns": []}, {"name": "xyzservices", "version": "2025.4.0", "vulns": []}, {"name": "yarl", "version": "1.20.1", "vulns": []}, {"name": "ydata-profiling", "version": "4.16.1", "vulns": []}, {"name": "zipp", "version": "3.23.0", "vulns": []}], "fixes": []}
